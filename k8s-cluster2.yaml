
- hosts: all
  tasks:
    - name: add host file
      lineinfile:
        path: '/etc/hosts'
        line: '{{item}}'
        insertafter: EOF
      with_items:
        - '34.64.133.133 master'
        - '34.64.123.139 worker'

   # - name: selinux off
   #  command: setenforce 0
    - name: install jq
      yum:
        name: jq
        state: present

    - name: selinux off forever
      selinux:
        state: disabled

    - name: firewalld off
      service:
        name: firewalld
        state: stopped
        enabled: false

    - name: swapoff
      command: swapoff -a

    - name: swapoff in fstab
      command: sed -i '/ swap / s/^/#/' /etc/fstab

    - name: br_netfilter
      command: modprobe br_netfilter

    - name: ip6table setting
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: 1
        state: present
    - name: iptable setting
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present

    - name: reboot
      reboot:

    - name: add Kubernetes yum repo
      yum_repository:
        name: Kubernetes
        description: app kube
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        gpgcheck: yes

    - name: yum-util
      yum:
        name: yum-utils
        state: present

    - name: add docker repo
      command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: install docker-ce
      command: yum install -y docker-ce docker-ce-cli containerd.io

    - name: start docker
      service:
        name: docker
        enabled: yes
        state: started

    - name: install kubelet
      yum:
        name: kubelet
        state: present

    - name: install kubeadm
      yum:
        name: kubeadm
        state: present

    - name: install kubectl
      yum:
        name: kubectl
        state: present

    - name: check docker
      stat: path=/etc/docker
      register: foo_var

    - name: mkdir docker
      shell: mkdir /etc/docker
      when: not foo_var.stat.exists

    - name: change cgroup
      shell:
        cmd: |
          cat <<EOF | sudo tee /etc/docker/daemon.json
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
               "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
          EOF

    - name: check docker service
      stat: path=/etc/systemd/system/docker.service.d
      register: gg

    - name: mkdir docker service
      shell: mkdir -p /etc/systemd/system/docker.service.d
      when: not gg.stat.exists

    - name: restart docker
      shell: systemctl daemon-reload && systemctl restart docker

    - name: stop kubelet
      shell: systemctl stop kubelet

    - name: kubeadm reset
      shell: kubeadm reset --force



    - name: start kubelet
      service:
        name: kubelet
        enabled: yes
        state: started

    - name: enable cri
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'disable*'
        line: "#"

    - name: restart cond
      command: systemctl restart containerd

- hosts: master
  become: yes
  tasks:
    - name: kubeinit
      shell: kubeadm init --apiserver-advertise-address=34.64.133.133 --pod-network-cidr=192.168.0.0/16

    - name: create kube dir
      become: yes
      become_user: root
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root

    - name: install pod net
      become: yes
      become_user: root
      shell: kubectl apply -f https://projectcalico.docs.tigera.io/v3.19/manifests/calico.yaml
      ignore_errors: yes

- hosts: master
  become: yes
  gather_facts: False
  tasks:
   # - name: get join hash
    #  shell: export CERT_HASH=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')

    #- name: get join token
     # shell: export TOKEN=$(kubeadm token list -o json | jq -r '.token' | head -1)

    #- name: get ip
     # shell: export IP=$(kubectl get nodes -o wide | awk '{print $6}' | tail -1)
     # ignore_errors: yes

    - name: make join command
      shell: echo "sudo kubeadm join $(kubectl get nodes -o wide | awk '{print $6}' | tail -1):6443 --token=$(kubeadm token list -o json | jq -r '.token' | head -1) --discovery-token-ca-cert-hash sha256:$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')"
      register: join_command_raw


    - name: set join token
      set_fact:
        join_command: "{{join_command_raw.stdout_lines[0] }}"

- hosts: node
  become: yes
  tasks:
    - name: join cluster
      shell: "{{ hostvars['master'].join_command}} --ignore-preflight-errors all"
